from addonmanager_workers import *
from typing import Any, Optional

__title__: str
__author__: Any
__url__: str

def QT_TRANSLATE_NOOP(ctx: Any, txt: Any): ...

class CommandAddonManager:
    def GetResources(self): ...
    def Activated(self) -> None: ...
    dialog: Any = ...
    repos: Any = ...
    macros: Any = ...
    macro_repo_dir: Any = ...
    doUpdate: Any = ...
    addon_removed: bool = ...
    firsttime: bool = ...
    firstmacro: bool = ...
    def launch(self) -> None: ...
    def reject(self): ...
    update_worker: Any = ...
    def update(self) -> None: ...
    check_worker: Any = ...
    def check_updates(self) -> None: ...
    def apply_updates(self) -> None: ...
    def enable_updates(self, num: Any) -> None: ...
    def add_addon_repo(self, addon_repo: Any) -> None: ...
    def get_icon(self, repo: Any): ...
    def show_information(self, label: Any) -> None: ...
    show_worker: Any = ...
    def show(self, idx: Any) -> None: ...
    showmacro_worker: Any = ...
    def show_macro(self, idx: Any) -> None: ...
    macro_worker: Any = ...
    def switchtab(self, idx: Any) -> None: ...
    def update_repos(self, repos: Any) -> None: ...
    def add_macro(self, macro: Any) -> None: ...
    install_worker: Any = ...
    def install(self, repos: Optional[Any] = ...) -> None: ...
    def show_progress_bar(self, state: Any) -> None: ...
    def executemacro(self) -> None: ...
    def remove_readonly(self, func: Any, path: Any, _: Any) -> None: ...
    def remove(self) -> None: ...
    def mark_recompute(self, addon: Any) -> None: ...
    def update_status(self, soft: bool = ...) -> None: ...
    def mark(self, repo: Any) -> None: ...
    config: Any = ...
    def show_config(self) -> None: ...

def check_updates(addon_name: Any, callback: Any) -> None: ...
