from typing import Any

import Base

def fromShape(Shape) -> Any: ...
def fromShapes(shapes, start = ..., return_end = ..., sort_mode = ..., min_dist = ..., abscissa = ..., nearest_k = ..., orientation = ..., direction = ..., threshold = ..., retract_axis = ..., retraction = ..., resume_height = ..., segmentation = ..., feedrate = ..., feedrate_v = ..., verbose = ..., abs_center = ..., preamble = ..., deflection = ...) -> Any: ...
def read(*args, **kwargs) -> Any: ...
def show(*args, **kwargs) -> Any: ...
def sortWires(shapes, start = ..., arc_plane = ..., min_dist = ..., abscissa = ..., nearest_k = ..., orientation = ..., direction = ..., threshold = ..., retract_axis = ...) -> Any: ...
def write(object, filename) -> Any: ...

class Area(Base.BaseClass):
    Sections: Any = ...
    Shapes: Any = ...
    Workplane: Any = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def abort(self, *args, **kwargs) -> Any: ...
    def add(self, *args, **kwargs) -> Any: ...
    def getDefaultParams(self, *args, **kwargs) -> Any: ...
    def getParams(self, *args, **kwargs) -> Any: ...
    def getParamsDesc(self, *args, **kwargs) -> Any: ...
    def getShape(index = ..., rebuild = ...) -> Any: ...
    def makeOffset(index = ..., offset = ..., extra_pass = ..., stepover = ..., last_stepover = ...) -> Any: ...
    def makePocket(index = ..., mode = ..., tool_radius = ..., extra_offset = ..., stepover = ..., last_stepover = ..., from_center = ..., angle = ..., angle_shift = ..., shift = ...) -> Any: ...
    def makeSections(mode = ..., project = ..., heights = ..., plane = ...) -> Any: ...
    def setDefaultParams(self, *args, **kwargs) -> Any: ...
    def setParams(self, *args, **kwargs) -> Any: ...
    def setPlane(shape) -> Any: ...
    def __delattr__(self, name) -> Any: ...
    def __setattr__(self, name, value) -> Any: ...

class Command(Base.Persistence):
    Name: Any = ...
    Parameters: Any = ...
    Placement: Any = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def setFromGCode(self, *args, **kwargs) -> Any: ...
    def toGCode(self, *args, **kwargs) -> Any: ...
    def transform(Placement) -> Any: ...
    def __delattr__(self, name) -> Any: ...
    def __setattr__(self, name, value) -> Any: ...

class Path(Base.Persistence):
    BoundBox: Any = ...
    Center: Any = ...
    Commands: Any = ...
    Length: Any = ...
    Size: Any = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def addCommands(self, *args, **kwargs) -> Any: ...
    def copy(self, *args, **kwargs) -> Any: ...
    def deleteCommand(self, *args, **kwargs) -> Any: ...
    def getCycleTime(self, *args, **kwargs) -> Any: ...
    def insertCommand(self, *args, **kwargs) -> Any: ...
    def setFromGCode(self, *args, **kwargs) -> Any: ...
    def toGCode(self, *args, **kwargs) -> Any: ...
    def __delattr__(self, name) -> Any: ...
    def __setattr__(self, name, value) -> Any: ...

class Tool(Base.Persistence):
    CornerRadius: Any = ...
    CuttingEdgeAngle: Any = ...
    CuttingEdgeHeight: Any = ...
    Diameter: Any = ...
    FlatRadius: Any = ...
    LengthOffset: Any = ...
    Material: Any = ...
    Name: Any = ...
    ToolType: Any = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def copy(self, *args, **kwargs) -> Any: ...
    def getToolMaterials(self, *args, **kwargs) -> Any: ...
    def getToolTypes(self, *args, **kwargs) -> Any: ...
    def setFromTemplate(self, *args, **kwargs) -> Any: ...
    def templateAttrs(self, *args, **kwargs) -> Any: ...
    def __delattr__(self, name) -> Any: ...
    def __setattr__(self, name, value) -> Any: ...

class Tooltable(Base.Persistence):
    Name: Any = ...
    Tools: Any = ...
    Version: Any = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def addTools(self, *args, **kwargs) -> Any: ...
    def copy(self, *args, **kwargs) -> Any: ...
    def deleteTool(int) -> Any: ...
    def getTool(int) -> Any: ...
    def setFromTemplate(dict) -> Any: ...
    def setTool(int, tool) -> Any: ...
    def templateAttrs(self, *args, **kwargs) -> Any: ...
    def __delattr__(self, name) -> Any: ...
    def __setattr__(self, name, value) -> Any: ...
