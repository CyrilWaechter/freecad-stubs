from typing import Any

class Axis(PyObjectBase):
    Base: Any = ...
    Direction: Any = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def copy(self, *args, **kwargs) -> Any: ...
    def move(Vector) -> Any: ...
    def multiply(Placement) -> Any: ...
    def reversed(self, *args, **kwargs) -> Any: ...
    def __delattr__(self, name) -> Any: ...
    def __setattr__(self, name, value) -> Any: ...

class BoundBox(PyObjectBase):
    Center: Any = ...
    DiagonalLength: Any = ...
    XLength: Any = ...
    XMax: Any = ...
    XMin: Any = ...
    YLength: Any = ...
    YMax: Any = ...
    YMin: Any = ...
    ZLength: Any = ...
    ZMax: Any = ...
    ZMin: Any = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def add(BoundBox) -> Any: ...
    def closestPoint(Vector) -> Any: ...
    def enlarge(Float) -> Any: ...
    def getEdge(Int) -> Any: ...
    def getIntersectionPoint(self, *args, **kwargs) -> Any: ...
    def getPoint(Int) -> Any: ...
    def intersect(self, *args, **kwargs) -> Any: ...
    def intersected(BoundBox) -> Any: ...
    def isCutPlane(VectorBase, VectorNormal) -> Any: ...
    def isInside(self, *args, **kwargs) -> Any: ...
    def isValid(self, *args, **kwargs) -> Any: ...
    def move(Vector) -> Any: ...
    def scale(x, y, z) -> Any: ...
    def setVoid(self, *args, **kwargs) -> Any: ...
    def transformed(Matrix) -> Any: ...
    def united(BoundBox) -> Any: ...
    def __delattr__(self, name) -> Any: ...
    def __setattr__(self, name, value) -> Any: ...

class CoordinateSystem(PyObjectBase):
    Axis: Any = ...
    Position: Any = ...
    XDirection: Any = ...
    YDirection: Any = ...
    ZDirection: Any = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def displacement(CoordinateSystem) -> Any: ...
    def setAxes(AxisorVectorz, Vectorx) -> Any: ...
    def setPlacement(self, *args, **kwargs) -> Any: ...
    def transform(RotationorPlacement) -> Any: ...
    def transformTo(Vector) -> Any: ...
    def __delattr__(self, name) -> Any: ...
    def __setattr__(self, name, value) -> Any: ...

class FreeCADAbort(BaseException): ...

class FreeCADError(RuntimeError): ...

class Matrix(PyObjectBase):
    A: Any = ...
    A11: Any = ...
    A12: Any = ...
    A13: Any = ...
    A14: Any = ...
    A21: Any = ...
    A22: Any = ...
    A23: Any = ...
    A24: Any = ...
    A31: Any = ...
    A32: Any = ...
    A33: Any = ...
    A34: Any = ...
    A41: Any = ...
    A42: Any = ...
    A43: Any = ...
    A44: Any = ...
    __hash__: Any = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def analyze(self, *args, **kwargs) -> Any: ...
    def determinant(self, *args, **kwargs) -> Any: ...
    def hasScale(tol = ...) -> Any: ...
    def inverse(self, *args, **kwargs) -> Any: ...
    def invert(self, *args, **kwargs) -> Any: ...
    def isOrthogonal(self, *args, **kwargs) -> Any: ...
    def move(Vector) -> Any: ...
    def multVec(Vector) -> Vector: ...
    def multiply(self, *args, **kwargs) -> Any: ...
    def rotateX(float) -> Any: ...
    def rotateY(float) -> Any: ...
    def rotateZ(float) -> Any: ...
    def scale(Vector) -> Any: ...
    def submatrix(int) -> Matrix: ...
    def transform(Vector, Matrix) -> Any: ...
    def transpose(self, *args, **kwargs) -> Any: ...
    def transposed(self, *args, **kwargs) -> Any: ...
    def unity(self, *args, **kwargs) -> Any: ...
    def __abs__(self) -> Any: ...
    def __add__(self, other) -> Any: ...
    def __and__(self, other) -> Any: ...
    def __bool__(self) -> Any: ...
    def __delattr__(self, name) -> Any: ...
    def __divmod__(self, other) -> Any: ...
    def __eq__(self, other) -> Any: ...
    def __float__(self) -> Any: ...
    def __ge__(self, other) -> Any: ...
    def __gt__(self, other) -> Any: ...
    def __int__(self) -> Any: ...
    def __invert__(self) -> Any: ...
    def __le__(self, other) -> Any: ...
    def __lshift__(self, other) -> Any: ...
    def __lt__(self, other) -> Any: ...
    def __mod__(self, other) -> Any: ...
    def __mul__(self, other) -> Any: ...
    def __ne__(self, other) -> Any: ...
    def __neg__(self) -> Any: ...
    def __or__(self, other) -> Any: ...
    def __pos__(self) -> Any: ...
    def __pow__(self, other) -> Any: ...
    def __radd__(self, other) -> Any: ...
    def __rand__(self, other) -> Any: ...
    def __rdivmod__(self, other) -> Any: ...
    def __rlshift__(self, other) -> Any: ...
    def __rmod__(self, other) -> Any: ...
    def __rmul__(self, other) -> Any: ...
    def __ror__(self, other) -> Any: ...
    def __rpow__(self, other) -> Any: ...
    def __rrshift__(self, other) -> Any: ...
    def __rshift__(self, other) -> Any: ...
    def __rsub__(self, other) -> Any: ...
    def __rtruediv__(self, other) -> Any: ...
    def __rxor__(self, other) -> Any: ...
    def __setattr__(self, name, value) -> Any: ...
    def __sub__(self, other) -> Any: ...
    def __truediv__(self, other) -> Any: ...
    def __xor__(self, other) -> Any: ...

class Placement(PyObjectBase):
    Base: Any = ...
    Matrix: Any = ...
    Rotation: Any = ...
    __hash__: Any = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def copy(self, *args, **kwargs) -> Any: ...
    def inverse(self, *args, **kwargs) -> Any: ...
    def isIdentity(self, *args, **kwargs) -> Any: ...
    def move(Vector) -> Any: ...
    def multVec(self, *args, **kwargs) -> Any: ...
    def multiply(Placement) -> Any: ...
    def pow(self, *args, **kwargs) -> Any: ...
    def rotate(center, axis, degree) -> Any: ...
    def sclerp(placement2, t, shorten = ...) -> Any: ...
    def slerp(self, *args, **kwargs) -> Any: ...
    def toMatrix(self, *args, **kwargs) -> Any: ...
    def translate(Vector) -> Any: ...
    def __abs__(self) -> Any: ...
    def __add__(self, other) -> Any: ...
    def __and__(self, other) -> Any: ...
    def __bool__(self) -> Any: ...
    def __delattr__(self, name) -> Any: ...
    def __divmod__(self, other) -> Any: ...
    def __eq__(self, other) -> Any: ...
    def __float__(self) -> Any: ...
    def __ge__(self, other) -> Any: ...
    def __gt__(self, other) -> Any: ...
    def __int__(self) -> Any: ...
    def __invert__(self) -> Any: ...
    def __le__(self, other) -> Any: ...
    def __lshift__(self, other) -> Any: ...
    def __lt__(self, other) -> Any: ...
    def __mod__(self, other) -> Any: ...
    def __mul__(self, other) -> Any: ...
    def __ne__(self, other) -> Any: ...
    def __neg__(self) -> Any: ...
    def __or__(self, other) -> Any: ...
    def __pos__(self) -> Any: ...
    def __pow__(self, other) -> Any: ...
    def __radd__(self, other) -> Any: ...
    def __rand__(self, other) -> Any: ...
    def __rdivmod__(self, other) -> Any: ...
    def __rlshift__(self, other) -> Any: ...
    def __rmod__(self, other) -> Any: ...
    def __rmul__(self, other) -> Any: ...
    def __ror__(self, other) -> Any: ...
    def __rpow__(self, other) -> Any: ...
    def __rrshift__(self, other) -> Any: ...
    def __rshift__(self, other) -> Any: ...
    def __rsub__(self, other) -> Any: ...
    def __rtruediv__(self, other) -> Any: ...
    def __rxor__(self, other) -> Any: ...
    def __setattr__(self, name, value) -> Any: ...
    def __sub__(self, other) -> Any: ...
    def __truediv__(self, other) -> Any: ...
    def __xor__(self, other) -> Any: ...

class ProgressIndicator:
    @classmethod
    def __init__(self, *args, **kwargs) -> None: ...

class Rotation(PyObjectBase):
    Angle: Any = ...
    Axis: Any = ...
    Q: Any = ...
    RawAxis: Any = ...
    __hash__: Any = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def invert(self, *args, **kwargs) -> Any: ...
    def inverted(self, *args, **kwargs) -> Any: ...
    def isIdentity(self, *args, **kwargs) -> Any: ...
    def isNull(self, *args, **kwargs) -> Any: ...
    def isSame(self, *args, **kwargs) -> Any: ...
    def multVec(Vector) -> Vector: ...
    def multiply(Rotation) -> Any: ...
    def slerp(Rotation, Float) -> Rotation: ...
    def toEuler(Vector) -> list: ...
    def toMatrix(self, *args, **kwargs) -> Any: ...
    def __abs__(self) -> Any: ...
    def __add__(self, other) -> Any: ...
    def __and__(self, other) -> Any: ...
    def __bool__(self) -> Any: ...
    def __delattr__(self, name) -> Any: ...
    def __divmod__(self, other) -> Any: ...
    def __eq__(self, other) -> Any: ...
    def __float__(self) -> Any: ...
    def __ge__(self, other) -> Any: ...
    def __gt__(self, other) -> Any: ...
    def __int__(self) -> Any: ...
    def __invert__(self) -> Any: ...
    def __le__(self, other) -> Any: ...
    def __lshift__(self, other) -> Any: ...
    def __lt__(self, other) -> Any: ...
    def __mod__(self, other) -> Any: ...
    def __mul__(self, other) -> Any: ...
    def __ne__(self, other) -> Any: ...
    def __neg__(self) -> Any: ...
    def __or__(self, other) -> Any: ...
    def __pos__(self) -> Any: ...
    def __pow__(self, other) -> Any: ...
    def __radd__(self, other) -> Any: ...
    def __rand__(self, other) -> Any: ...
    def __rdivmod__(self, other) -> Any: ...
    def __rlshift__(self, other) -> Any: ...
    def __rmod__(self, other) -> Any: ...
    def __rmul__(self, other) -> Any: ...
    def __ror__(self, other) -> Any: ...
    def __rpow__(self, other) -> Any: ...
    def __rrshift__(self, other) -> Any: ...
    def __rshift__(self, other) -> Any: ...
    def __rsub__(self, other) -> Any: ...
    def __rtruediv__(self, other) -> Any: ...
    def __rxor__(self, other) -> Any: ...
    def __setattr__(self, name, value) -> Any: ...
    def __sub__(self, other) -> Any: ...
    def __truediv__(self, other) -> Any: ...
    def __xor__(self, other) -> Any: ...

class TypeId(PyObjectBase):
    Key: Any = ...
    Module: Any = ...
    Name: Any = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def fromKey(self, *args, **kwargs) -> Any: ...
    def fromName(self, *args, **kwargs) -> Any: ...
    def getAllDerived(self, *args, **kwargs) -> Any: ...
    def getAllDerivedFrom(self, *args, **kwargs) -> Any: ...
    def getBadType(self, *args, **kwargs) -> Any: ...
    def getNumTypes(self, *args, **kwargs) -> Any: ...
    def getParent(self, *args, **kwargs) -> Any: ...
    def isBad(self, *args, **kwargs) -> Any: ...
    def isDerivedFrom(self, *args, **kwargs) -> Any: ...
    def __delattr__(self, name) -> Any: ...
    def __setattr__(self, name, value) -> Any: ...

class Vector(PyObjectBase):
    Length: Any = ...
    x: Any = ...
    y: Any = ...
    z: Any = ...
    __hash__: Any = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def add(Vector) -> Any: ...
    def cross(Vector) -> Any: ...
    def distanceToLine(self, *args, **kwargs) -> Any: ...
    def distanceToLineSegment(self, *args, **kwargs) -> Any: ...
    def distanceToPlane(self, *args, **kwargs) -> Any: ...
    def distanceToPoint(Vector) -> Any: ...
    def dot(Vector) -> Any: ...
    def getAngle(Vector) -> Any: ...
    def isEqual(Vector, tolerance) -> Boolean: ...
    def isOnLineSegment(self, *args, **kwargs) -> Any: ...
    def multiply(Float) -> Any: ...
    def negative(opposite) -> Any: ...
    def normalize(self, *args, **kwargs) -> Any: ...
    def projectToLine(Vectorpnt, Vectorvec) -> Any: ...
    def projectToPlane(self, *args, **kwargs) -> Any: ...
    def scale(self, *args, **kwargs) -> Any: ...
    def sub(Vector) -> Any: ...
    def __abs__(self) -> Any: ...
    def __add__(self, other) -> Any: ...
    def __and__(self, other) -> Any: ...
    def __bool__(self) -> Any: ...
    def __delattr__(self, name) -> Any: ...
    def __delitem__(self, other) -> Any: ...
    def __divmod__(self, other) -> Any: ...
    def __eq__(self, other) -> Any: ...
    def __float__(self) -> Any: ...
    def __ge__(self, other) -> Any: ...
    def __getitem__(self, index) -> Any: ...
    def __gt__(self, other) -> Any: ...
    def __int__(self) -> Any: ...
    def __invert__(self) -> Any: ...
    def __le__(self, other) -> Any: ...
    def __len__(self) -> Any: ...
    def __lshift__(self, other) -> Any: ...
    def __lt__(self, other) -> Any: ...
    def __mod__(self, other) -> Any: ...
    def __mul__(self, other) -> Any: ...
    def __ne__(self, other) -> Any: ...
    def __neg__(self) -> Any: ...
    def __or__(self, other) -> Any: ...
    def __pos__(self) -> Any: ...
    def __pow__(self, other) -> Any: ...
    def __radd__(self, other) -> Any: ...
    def __rand__(self, other) -> Any: ...
    def __rdivmod__(self, other) -> Any: ...
    def __reduce__(self) -> Any: ...
    def __rlshift__(self, other) -> Any: ...
    def __rmod__(self, other) -> Any: ...
    def __rmul__(self, other) -> Any: ...
    def __ror__(self, other) -> Any: ...
    def __rpow__(self, other) -> Any: ...
    def __rrshift__(self, other) -> Any: ...
    def __rshift__(self, other) -> Any: ...
    def __rsub__(self, other) -> Any: ...
    def __rtruediv__(self, other) -> Any: ...
    def __rxor__(self, other) -> Any: ...
    def __setattr__(self, name, value) -> Any: ...
    def __setitem__(self, index, object) -> Any: ...
    def __sub__(self, other) -> Any: ...
    def __truediv__(self, other) -> Any: ...
    def __xor__(self, other) -> Any: ...

class Vector2d:
    def __init__(self, *args, **kwargs) -> None: ...
    def __delattr__(self, name) -> Any: ...
    def __setattr__(self, name, value) -> Any: ...
