from typing import Any

from typing import overload
import App
import Base
import Data
OCC_VERSION: str

def __fromPythonOCC__(occ) -> Any: ...
def __sortEdges__(listofedges) -> Any: ...
def __toPythonOCC__(shape) -> Any: ...
def cast_to_shape(shape) -> Any: ...
def clearShapeCache(*args, **kwargs) -> Any: ...
def export(list, string) -> Any: ...
def exportUnits(*args, **kwargs) -> Any: ...
def getFacets(shape) -> Any: ...
def getShape(obj, subname = ..., mat = ..., needSubElement = ..., transform = ..., retType = ...) -> Any: ...
def getSortedClusters(listofedges) -> Any: ...
def insert(*args, **kwargs) -> Any: ...
def joinSubname(sub, mapped, subElement) -> subname: ...
def makeBox(*args, **kwargs) -> Any: ...
def makeCircle(*args, **kwargs) -> Any: ...
def makeCompound(list) -> Any: ...
def makeCone(*args, **kwargs) -> Any: ...
def makeCylinder(*args, **kwargs) -> Any: ...
def makeFace(list_of_shapes_or_compound, maker_class_name) -> Any: ...
def makeFilledFace(list) -> Any: ...
def makeHelix(*args, **kwargs) -> Any: ...
def makeLine(startpnt, endpnt) -> Any: ...
def makeLoft(*args, **kwargs) -> Any: ...
def makeLongHelix(*args, **kwargs) -> Any: ...
def makePlane(*args, **kwargs) -> Any: ...
def makePolygon(pntslist) -> Any: ...
def makeRevolution(*args, **kwargs) -> Any: ...
def makeRuledSurface(*args, **kwargs) -> Any: ...
def makeShell(list) -> Any: ...
def makeSolid(shape) -> Any: ...
def makeSphere(*args, **kwargs) -> Any: ...
def makeSplitShape(face, split) -> Any: ...
def makeSweepSurface(*args, **kwargs) -> Any: ...
def makeThread(pitch, depth, height, radius) -> Any: ...
def makeTorus(*args, **kwargs) -> Any: ...
def makeTube(*args, **kwargs) -> Any: ...
def makeWedge(*args, **kwargs) -> Any: ...
def makeWireString(*args, **kwargs) -> Any: ...
def open(string) -> Any: ...
def read(string) -> Any: ...
def setStaticValue(*args, **kwargs) -> Any: ...
def show(*args, **kwargs) -> Any: ...
def sortEdges(listofedges) -> Any: ...
def splitSubname(*args, **kwargs) -> Any: ...

class Arc(TrimmedCurve):
    def __init__(self, *args, **kwargs) -> None: ...
    def __delattr__(self, name) -> Any: ...
    def __setattr__(self, name, value) -> Any: ...

class ArcOfCircle(ArcOfConic):
    Circle: Any = ...
    Radius: Any = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __delattr__(self, name) -> Any: ...
    def __setattr__(self, name, value) -> Any: ...

class ArcOfConic(TrimmedCurve):
    AngleXU: Any = ...
    Axis: Any = ...
    Center: Any = ...
    Location: Any = ...
    XAxis: Any = ...
    YAxis: Any = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __delattr__(self, name) -> Any: ...
    def __setattr__(self, name, value) -> Any: ...

class ArcOfEllipse(ArcOfConic):
    Ellipse: Any = ...
    MajorRadius: Any = ...
    MinorRadius: Any = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __delattr__(self, name) -> Any: ...
    def __setattr__(self, name, value) -> Any: ...

class ArcOfHyperbola(ArcOfConic):
    Hyperbola: Any = ...
    MajorRadius: Any = ...
    MinorRadius: Any = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __delattr__(self, name) -> Any: ...
    def __setattr__(self, name, value) -> Any: ...

class ArcOfParabola(ArcOfConic):
    Focal: Any = ...
    Parabola: Any = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __delattr__(self, name) -> Any: ...
    def __setattr__(self, name, value) -> Any: ...

class AttachEngine(Base.BaseClass):
    AttacherType: Any = ...
    AttachmentOffset: Any = ...
    CompleteModeList: Any = ...
    CompleteRefTypeList: Any = ...
    ImplementedModes: Any = ...
    Mode: Any = ...
    Parameter: Any = ...
    References: Any = ...
    Reverse: Any = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def calculateAttachedPlacement(orig_placement) -> Any: ...
    def copy(self, *args, **kwargs) -> Any: ...
    def downgradeRefType(type) -> Any: ...
    def getModeInfo(mode) -> Any: ...
    def getRefTypeInfo(type) -> Any: ...
    def getRefTypeOfShape(shape) -> Any: ...
    def isFittingRefType(type_shape, type_needed) -> Any: ...
    def readParametersFromFeature(document_object) -> Any: ...
    def suggestModes(self, *args, **kwargs) -> Any: ...
    def writeParametersToFeature(document_object) -> Any: ...
    def __delattr__(self, name) -> Any: ...
    def __setattr__(self, name, value) -> Any: ...

class BSplineCurve(BoundedCurve):
    Degree: Any = ...
    EndPoint: Any = ...
    FirstUKnotIndex: Any = ...
    KnotSequence: Any = ...
    LastUKnotIndex: Any = ...
    MaxDegree: Any = ...
    NbKnots: Any = ...
    NbPoles: Any = ...
    StartPoint: Any = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def approximate(Points = ...) -> Any: ...
    def buildFromPoles(self, *args, **kwargs) -> Any: ...
    def buildFromPolesMultsKnots(self, *args, **kwargs) -> Any: ...
    def getCardinalSplineTangents(self, *args, **kwargs) -> Any: ...
    def getKnot(self, *args, **kwargs) -> Any: ...
    def getKnots(self, *args, **kwargs) -> Any: ...
    def getMultiplicities(self, *args, **kwargs) -> Any: ...
    def getMultiplicity(self, *args, **kwargs) -> Any: ...
    def getPole(self, *args, **kwargs) -> Any: ...
    def getPoles(self, *args, **kwargs) -> Any: ...
    def getPolesAndWeights(self, *args, **kwargs) -> Any: ...
    def getResolution(self, *args, **kwargs) -> Any: ...
    def getWeight(self, *args, **kwargs) -> Any: ...
    def getWeights(self, *args, **kwargs) -> Any: ...
    def increaseDegree(self, *args, **kwargs) -> Any: ...
    @overload
    def increaseMultiplicity(intindex, intmult) -> Any: ...
    @overload
    def increaseMultiplicity(intstart, intend, intmult) -> Any: ...
    def incrementMultiplicity(intstart, intend, intmult) -> Any: ...
    def insertKnot(u, mult = ..., tol = ...) -> Any: ...
    def insertKnots(list_of_floats, list_of_ints, tol = ..., bool_add = ...) -> Any: ...
    def interpolate(Points = ...) -> Any: ...
    def isClosed(self, *args, **kwargs) -> Any: ...
    def isPeriodic(self, *args, **kwargs) -> Any: ...
    def isRational(self, *args, **kwargs) -> Any: ...
    def join(self, *args, **kwargs) -> Any: ...
    def makeC1Continuous(tol = ..., ang_tol = ...) -> Any: ...
    def movePoint(U, P, Index1, Index2) -> Any: ...
    def removeKnot(Index, M, tol) -> Any: ...
    def segment(u1, u2) -> Any: ...
    def setKnot(self, *args, **kwargs) -> Any: ...
    def setKnots(self, *args, **kwargs) -> Any: ...
    def setNotPeriodic(self, *args, **kwargs) -> Any: ...
    def setOrigin(self, *args, **kwargs) -> Any: ...
    def setPeriodic(self, *args, **kwargs) -> Any: ...
    def setPole(self, *args, **kwargs) -> Any: ...
    def setWeight(self, *args, **kwargs) -> Any: ...
    def toBezier(self, *args, **kwargs) -> Any: ...
    def toBiArcs(self, *args, **kwargs) -> Any: ...
    def __delattr__(self, name) -> Any: ...
    def __reduce__(self) -> Any: ...
    def __setattr__(self, name, value) -> Any: ...

class BSplineSurface(GeometrySurface):
    FirstUKnotIndex: Any = ...
    FirstVKnotIndex: Any = ...
    LastUKnotIndex: Any = ...
    LastVKnotIndex: Any = ...
    MaxDegree: Any = ...
    NbUKnots: Any = ...
    NbUPoles: Any = ...
    NbVKnots: Any = ...
    NbVPoles: Any = ...
    UDegree: Any = ...
    UKnotSequence: Any = ...
    VDegree: Any = ...
    VKnotSequence: Any = ...
    def __init__(self, *args, **kwargs) -> None: ...
    @overload
    def approximate(Points, DegMin, DegMax, Continuity, Tolerance) -> Any: ...
    @overload
    def approximate(Points, DegMin, DegMax, Continuity, Tolerance, X0, dX, Y0, dY) -> Any: ...
    @overload
    def approximate(Points, DegMin, DegMax, Continuity, Tolerance, ParamType) -> Any: ...
    @overload
    def approximate(Points, DegMax, Continuity, Tolerance, LengthWeight, CurvatureWeight, TorsionWeight) -> Any: ...
    def bounds(U1, U2, V1, V2) -> Any: ...
    def buildFromPolesMultsKnots(self, *args, **kwargs) -> Any: ...
    def exchangeUV(self, *args, **kwargs) -> Any: ...
    def getPole(self, *args, **kwargs) -> Any: ...
    def getPoles(self, *args, **kwargs) -> Any: ...
    def getPolesAndWeights(self, *args, **kwargs) -> Any: ...
    def getResolution(self, *args, **kwargs) -> Any: ...
    def getUKnot(self, *args, **kwargs) -> Any: ...
    def getUKnots(self, *args, **kwargs) -> Any: ...
    def getUMultiplicities(self, *args, **kwargs) -> Any: ...
    def getUMultiplicity(self, *args, **kwargs) -> Any: ...
    def getVKnot(self, *args, **kwargs) -> Any: ...
    def getVKnots(self, *args, **kwargs) -> Any: ...
    def getVMultiplicities(self, *args, **kwargs) -> Any: ...
    def getVMultiplicity(self, *args, **kwargs) -> Any: ...
    def getWeight(self, *args, **kwargs) -> Any: ...
    def getWeights(self, *args, **kwargs) -> Any: ...
    def increaseDegree(self, *args, **kwargs) -> Any: ...
    def increaseUMultiplicity(self, *args, **kwargs) -> Any: ...
    def increaseVMultiplicity(self, *args, **kwargs) -> Any: ...
    def incrementUMultiplicity(self, *args, **kwargs) -> Any: ...
    def incrementVMultiplicity(self, *args, **kwargs) -> Any: ...
    def insertUKnot(self, *args, **kwargs) -> Any: ...
    def insertUKnots(self, *args, **kwargs) -> Any: ...
    def insertVKnot(self, *args, **kwargs) -> Any: ...
    def insertVKnots(self, *args, **kwargs) -> Any: ...
    @overload
    def interpolate(points) -> Any: ...
    @overload
    def interpolate(zpoints, X0, dX, Y0, dY) -> Any: ...
    def isUClosed(self, *args, **kwargs) -> Any: ...
    def isUPeriodic(self, *args, **kwargs) -> Any: ...
    def isURational(self, *args, **kwargs) -> Any: ...
    def isVClosed(self, *args, **kwargs) -> Any: ...
    def isVPeriodic(self, *args, **kwargs) -> Any: ...
    def isVRational(self, *args, **kwargs) -> Any: ...
    def movePoint(self, *args, **kwargs) -> Any: ...
    def removeUKnot(self, *args, **kwargs) -> Any: ...
    def removeVKnot(self, *args, **kwargs) -> Any: ...
    def reparametrize(self, *args, **kwargs) -> Any: ...
    def segment(self, *args, **kwargs) -> Any: ...
    def setPole(self, *args, **kwargs) -> Any: ...
    def setPoleCol(self, *args, **kwargs) -> Any: ...
    def setPoleRow(self, *args, **kwargs) -> Any: ...
    def setUKnot(self, *args, **kwargs) -> Any: ...
    def setUKnots(self, *args, **kwargs) -> Any: ...
    def setUNotPeriodic(self, *args, **kwargs) -> Any: ...
    def setUOrigin(self, *args, **kwargs) -> Any: ...
    def setUPeriodic(self, *args, **kwargs) -> Any: ...
    def setVKnot(self, *args, **kwargs) -> Any: ...
    def setVKnots(self, *args, **kwargs) -> Any: ...
    def setVNotPeriodic(self, *args, **kwargs) -> Any: ...
    def setVOrigin(self, *args, **kwargs) -> Any: ...
    def setVPeriodic(self, *args, **kwargs) -> Any: ...
    def setWeight(self, *args, **kwargs) -> Any: ...
    def setWeightCol(self, *args, **kwargs) -> Any: ...
    def setWeightRow(self, *args, **kwargs) -> Any: ...
    def uIso(self, *args, **kwargs) -> Any: ...
    def vIso(self, *args, **kwargs) -> Any: ...
    def __delattr__(self, name) -> Any: ...
    def __setattr__(self, name, value) -> Any: ...

class BezierCurve(BoundedCurve):
    Degree: Any = ...
    EndPoint: Any = ...
    MaxDegree: Any = ...
    NbPoles: Any = ...
    StartPoint: Any = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def getPole(self, *args, **kwargs) -> Any: ...
    def getPoles(self, *args, **kwargs) -> Any: ...
    def getResolution(self, *args, **kwargs) -> Any: ...
    def getWeight(self, *args, **kwargs) -> Any: ...
    def getWeights(self, *args, **kwargs) -> Any: ...
    def increase(Int = ...) -> Any: ...
    def insertPoleAfter(self, *args, **kwargs) -> Any: ...
    def insertPoleBefore(self, *args, **kwargs) -> Any: ...
    def isClosed(self, *args, **kwargs) -> Any: ...
    def isPeriodic(self, *args, **kwargs) -> Any: ...
    def isRational(self, *args, **kwargs) -> Any: ...
    def removePole(self, *args, **kwargs) -> Any: ...
    def segment(self, *args, **kwargs) -> Any: ...
    def setPole(self, *args, **kwargs) -> Any: ...
    def setPoles(self, *args, **kwargs) -> Any: ...
    def setWeight(self, *args, **kwargs) -> Any: ...
    def __delattr__(self, name) -> Any: ...
    def __setattr__(self, name, value) -> Any: ...

class BezierSurface(GeometrySurface):
    MaxDegree: Any = ...
    NbUPoles: Any = ...
    NbVPoles: Any = ...
    UDegree: Any = ...
    VDegree: Any = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def bounds(U1, U2, V1, V2) -> Any: ...
    def exchangeUV(self, *args, **kwargs) -> Any: ...
    def getPole(self, *args, **kwargs) -> Any: ...
    def getPoles(self, *args, **kwargs) -> Any: ...
    def getResolution(self, *args, **kwargs) -> Any: ...
    def getWeight(self, *args, **kwargs) -> Any: ...
    def getWeights(self, *args, **kwargs) -> Any: ...
    def increase(self, *args, **kwargs) -> Any: ...
    def insertPoleColAfter(self, *args, **kwargs) -> Any: ...
    def insertPoleColBefore(self, *args, **kwargs) -> Any: ...
    def insertPoleRowAfter(self, *args, **kwargs) -> Any: ...
    def insertPoleRowBefore(self, *args, **kwargs) -> Any: ...
    def isUClosed(self, *args, **kwargs) -> Any: ...
    def isUPeriodic(self, *args, **kwargs) -> Any: ...
    def isURational(self, *args, **kwargs) -> Any: ...
    def isVClosed(self, *args, **kwargs) -> Any: ...
    def isVPeriodic(self, *args, **kwargs) -> Any: ...
    def isVRational(self, *args, **kwargs) -> Any: ...
    def removePoleCol(self, *args, **kwargs) -> Any: ...
    def removePoleRow(int = ...) -> Any: ...
    def segment(self, *args, **kwargs) -> Any: ...
    def setPole(self, *args, **kwargs) -> Any: ...
    def setPoleCol(self, *args, **kwargs) -> Any: ...
    def setPoleRow(self, *args, **kwargs) -> Any: ...
    def setWeight(self, *args, **kwargs) -> Any: ...
    def setWeightCol(self, *args, **kwargs) -> Any: ...
    def setWeightRow(self, *args, **kwargs) -> Any: ...
    def uIso(self, *args, **kwargs) -> Any: ...
    def vIso(self, *args, **kwargs) -> Any: ...
    def __delattr__(self, name) -> Any: ...
    def __setattr__(self, name, value) -> Any: ...

class Circle(Conic):
    Radius: Any = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __delattr__(self, name) -> Any: ...
    def __setattr__(self, name, value) -> Any: ...

class CompSolid(Shape):
    def __init__(self, *args, **kwargs) -> None: ...
    def add(self, *args, **kwargs) -> Any: ...
    def __delattr__(self, name) -> Any: ...
    def __setattr__(self, name, value) -> Any: ...

class Compound(Shape):
    def __init__(self, *args, **kwargs) -> None: ...
    def add(self, *args, **kwargs) -> Any: ...
    def connectEdgesToWires(Shared = ..., Tolerance = ...) -> Any: ...
    def __delattr__(self, name) -> Any: ...
    def __setattr__(self, name, value) -> Any: ...

class Cone(GeometrySurface):
    Apex: Any = ...
    Axis: Any = ...
    Center: Any = ...
    Radius: Any = ...
    SemiAngle: Any = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def uIso(self, *args, **kwargs) -> Any: ...
    def vIso(self, *args, **kwargs) -> Any: ...
    def __delattr__(self, name) -> Any: ...
    def __setattr__(self, name, value) -> Any: ...

class Conic(Curve):
    AngleXU: Any = ...
    Axis: Any = ...
    Center: Any = ...
    Eccentricity: Any = ...
    Location: Any = ...
    XAxis: Any = ...
    YAxis: Any = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __delattr__(self, name) -> Any: ...
    def __setattr__(self, name, value) -> Any: ...

class Cylinder(GeometrySurface):
    Axis: Any = ...
    Center: Any = ...
    Radius: Any = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def uIso(self, *args, **kwargs) -> Any: ...
    def vIso(self, *args, **kwargs) -> Any: ...
    def __delattr__(self, name) -> Any: ...
    def __setattr__(self, name, value) -> Any: ...

class Edge(Shape):
    CenterOfMass: Any = ...
    Closed: Any = ...
    Continuity: Any = ...
    Curve: Any = ...
    Degenerated: Any = ...
    FirstParameter: Any = ...
    LastParameter: Any = ...
    Length: Any = ...
    Mass: Any = ...
    MatrixOfInertia: Any = ...
    ParameterRange: Any = ...
    PrincipalProperties: Any = ...
    StaticMoments: Any = ...
    Tolerance: Any = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def centerOfCurvatureAt(floatpos) -> Any: ...
    def curvatureAt(paramval) -> Any: ...
    def derivative1At(paramval) -> Any: ...
    def derivative2At(paramval) -> Any: ...
    def derivative3At(paramval) -> Any: ...
    @overload
    def discretize(Number = ...) -> Any: ...
    @overload
    def discretize(QuasiNumber = ...) -> Any: ...
    @overload
    def discretize(Distance = ...) -> Any: ...
    @overload
    def discretize(Deflection = ...) -> Any: ...
    @overload
    def discretize(QuasiDeflection = ...) -> Any: ...
    @overload
    def discretize(Number = ..., First = ...) -> Any: ...
    @overload
    def discretize(Angular = ..., Curvature = ..., Last = ..., Minimum = ...) -> Any: ...
    def firstVertex(Orientation = ...) -> Any: ...
    def getParameterByLength(self, *args, **kwargs) -> Any: ...
    def isSeam(Face) -> Any: ...
    def lastVertex(Orientation = ...) -> Any: ...
    def normalAt(paramval) -> Any: ...
    def parameterAt(Vertex) -> Any: ...
    def parameters(self, *args, **kwargs) -> Any: ...
    def split(paramval) -> Any: ...
    def tangentAt(paramval) -> Any: ...
    def valueAt(paramval) -> Any: ...
    def __delattr__(self, name) -> Any: ...
    def __setattr__(self, name, value) -> Any: ...

class Ellipse(Conic):
    Focal: Any = ...
    Focus1: Any = ...
    Focus2: Any = ...
    MajorRadius: Any = ...
    MinorRadius: Any = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __delattr__(self, name) -> Any: ...
    def __setattr__(self, name, value) -> Any: ...

class Face(Shape):
    CenterOfMass: Any = ...
    Mass: Any = ...
    MatrixOfInertia: Any = ...
    OuterWire: Any = ...
    ParameterRange: Any = ...
    PrincipalProperties: Any = ...
    StaticMoments: Any = ...
    Surface: Any = ...
    Tolerance: Any = ...
    Wire: Any = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def curvatureAt(pos) -> Any: ...
    def curveOnSurface(self, *args, **kwargs) -> Any: ...
    def cutHoles(list_of_wires) -> Any: ...
    def derivative1At(self, *args, **kwargs) -> Any: ...
    def derivative2At(self, *args, **kwargs) -> Any: ...
    def getUVNodes(self, *args, **kwargs) -> Any: ...
    def isPartOfDomain(self, *args, **kwargs) -> Any: ...
    def makeHalfSpace(self, *args, **kwargs) -> Any: ...
    def makeOffset(self, *args, **kwargs) -> Any: ...
    def normalAt(pos) -> Any: ...
    def tangentAt(self, *args, **kwargs) -> Any: ...
    def validate(self, *args, **kwargs) -> Any: ...
    def valueAt(pos) -> Any: ...
    def __delattr__(self, name) -> Any: ...
    def __setattr__(self, name, value) -> Any: ...

class Feature(App.GeoFeature):
    def __init__(self, *args, **kwargs) -> None: ...
    def __delattr__(self, name) -> Any: ...
    def __setattr__(self, name, value) -> Any: ...

class GeometryBoolExtension(GeometryExtension):
    Value: Any = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __delattr__(self, name) -> Any: ...
    def __setattr__(self, name, value) -> Any: ...

class GeometryDoubleExtension(GeometryExtension):
    Value: Any = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __delattr__(self, name) -> Any: ...
    def __setattr__(self, name, value) -> Any: ...

class GeometryIntExtension(GeometryExtension):
    Value: Any = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __delattr__(self, name) -> Any: ...
    def __setattr__(self, name, value) -> Any: ...

class GeometryStringExtension(GeometryExtension):
    Value: Any = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __delattr__(self, name) -> Any: ...
    def __setattr__(self, name, value) -> Any: ...

class Hyperbola(Conic):
    Focal: Any = ...
    Focus1: Any = ...
    Focus2: Any = ...
    MajorRadius: Any = ...
    MinorRadius: Any = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __delattr__(self, name) -> Any: ...
    def __setattr__(self, name, value) -> Any: ...

class Line(Curve):
    Direction: Any = ...
    Location: Any = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __delattr__(self, name) -> Any: ...
    def __setattr__(self, name, value) -> Any: ...

class LineSegment(TrimmedCurve):
    EndPoint: Any = ...
    StartPoint: Any = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def setParameterRange(self, *args, **kwargs) -> Any: ...
    def __delattr__(self, name) -> Any: ...
    def __setattr__(self, name, value) -> Any: ...

class OCCConstructionError(OCCDomainError): ...

class OCCDimensionError(OCCDomainError): ...

class OCCDomainError(OCCError): ...

class OCCError(Base.FreeCADError): ...

class OCCRangeError(OCCDomainError): ...

class OffsetCurve(Curve):
    BasisCurve: Any = ...
    OffsetDirection: Any = ...
    OffsetValue: Any = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __delattr__(self, name) -> Any: ...
    def __setattr__(self, name, value) -> Any: ...

class OffsetSurface(GeometrySurface):
    BasisSurface: Any = ...
    OffsetValue: Any = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __delattr__(self, name) -> Any: ...
    def __setattr__(self, name, value) -> Any: ...

class Parabola(Conic):
    Focal: Any = ...
    Focus: Any = ...
    Parameter: Any = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def compute(p1, p2, p3) -> Any: ...
    def __delattr__(self, name) -> Any: ...
    def __setattr__(self, name, value) -> Any: ...

class Plane(GeometrySurface):
    Axis: Any = ...
    Position: Any = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def uIso(self, *args, **kwargs) -> Any: ...
    def vIso(self, *args, **kwargs) -> Any: ...
    def __delattr__(self, name) -> Any: ...
    def __setattr__(self, name, value) -> Any: ...

class PlateSurface(GeometrySurface):
    def __init__(self, *args, **kwargs) -> None: ...
    def makeApprox(self, *args, **kwargs) -> Any: ...
    def __delattr__(self, name) -> Any: ...
    def __setattr__(self, name, value) -> Any: ...

class Point(Geometry):
    X: Any = ...
    Y: Any = ...
    Z: Any = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def toShape(self, *args, **kwargs) -> Any: ...
    def __delattr__(self, name) -> Any: ...
    def __setattr__(self, name, value) -> Any: ...

class RectangularTrimmedSurface(GeometrySurface):
    def __init__(self, *args, **kwargs) -> None: ...
    def uIso(self, *args, **kwargs) -> Any: ...
    def vIso(self, *args, **kwargs) -> Any: ...
    def __delattr__(self, name) -> Any: ...
    def __setattr__(self, name, value) -> Any: ...

class Shape(Data.ComplexGeoData):
    Area: Any = ...
    CompSolids: Any = ...
    Compounds: Any = ...
    Edges: Any = ...
    Faces: Any = ...
    Length: Any = ...
    Orientation: Any = ...
    ShapeType: Any = ...
    Shells: Any = ...
    Solids: Any = ...
    SubShapes: Any = ...
    Vertexes: Any = ...
    Volume: Any = ...
    Wires: Any = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def ancestorsOfType(shape, shapetype) -> list: ...
    def check(runBopCheck = ...) -> Any: ...
    def childShapes(self, *args, **kwargs) -> Any: ...
    def cleaned(self, *args, **kwargs) -> Any: ...
    def common(tool) -> Shape: ...
    def complement(self, *args, **kwargs) -> Any: ...
    def copy(copyGeom = ..., copyMesh = ...) -> Shape: ...
    def countElement(self, *args, **kwargs) -> Any: ...
    def cut(tool) -> Shape: ...
    def defeaturing(self, *args, **kwargs) -> Any: ...
    def distToShape(Shapes) -> Any: ...
    def dumpToString(self, *args, **kwargs) -> Any: ...
    def exportBinary(self, *args, **kwargs) -> Any: ...
    def exportBrep(self, *args, **kwargs) -> Any: ...
    def exportBrepToString(self, *args, **kwargs) -> Any: ...
    def exportIges(self, *args, **kwargs) -> Any: ...
    def exportStep(self, *args, **kwargs) -> Any: ...
    def exportStl(self, *args, **kwargs) -> Any: ...
    def extrude(self, *args, **kwargs) -> Any: ...
    def findPlane(tol = ...) -> Any: ...
    def fix(workingprecision, minimumprecision, maximumprecision) -> Any: ...
    def fixTolerance(value, ShapeType = ...) -> Any: ...
    def fuse(tool) -> Shape: ...
    def generalFuse(list_of_other_shapes, fuzzy_value = ...) -> Any: ...
    def getElement(self, *args, **kwargs) -> Any: ...
    def getTolerance(mode, ShapeType = ...) -> float: ...
    def globalTolerance(mode) -> float: ...
    def hashCode(self, *args, **kwargs) -> Any: ...
    def importBinary(self, *args, **kwargs) -> Any: ...
    def importBrep(self, *args, **kwargs) -> Any: ...
    def importBrepFromString(str, False) -> Any: ...
    def inTolerance(value, ShapeType = ...) -> float: ...
    def isClosed(self, *args, **kwargs) -> Any: ...
    def isCoplanar(shape, tol = ...) -> Any: ...
    def isEqual(self, *args, **kwargs) -> Any: ...
    def isInside(self, *args, **kwargs) -> Any: ...
    def isNull(self, *args, **kwargs) -> Any: ...
    def isPartner(self, *args, **kwargs) -> Any: ...
    def isSame(self, *args, **kwargs) -> Any: ...
    def isValid(self, *args, **kwargs) -> Any: ...
    def limitTolerance(tmin, tmax = ..., ShapeType = ...) -> Any: ...
    def makeChamfer(self, *args, **kwargs) -> Any: ...
    def makeFillet(self, *args, **kwargs) -> Any: ...
    def makeOffset2D(offset, join = ..., fill = ..., openResult = ..., intersection = ...) -> Any: ...
    def makeOffsetShape(offset, tolerance, inter = ..., self_inter = ..., 
offsetMode = ..., join = ..., fill = ...) -> Any: ...
    def makeParallelProjection(shape, dir) -> Any: ...
    def makePerspectiveProjection(shape, pnt) -> Any: ...
    def makeShapeFromMesh(self, *args, **kwargs) -> Any: ...
    def makeThickness(self, *args, **kwargs) -> Any: ...
    def makeWires(op = ...) -> Any: ...
    def mirror(self, *args, **kwargs) -> Any: ...
    def multiFuse(self, *args, **kwargs) -> Any: ...
    def nullify(self, *args, **kwargs) -> Any: ...
    def oldFuse(self, *args, **kwargs) -> Any: ...
    def optimalBoundingBox(useTriangulation = ..., useShapeTolerance = ...) -> boundbox: ...
    def overTolerance(value, ShapeType = ...) -> float: ...
    def project(self, *args, **kwargs) -> Any: ...
    def proximity(Shapes) -> Any: ...
    def read(self, *args, **kwargs) -> Any: ...
    def reflectLines(ViewDir, ViewPos, UpDir) -> Shape: ...
    def removeInternalWires(self, *args, **kwargs) -> Any: ...
    def removeShape(self, *args, **kwargs) -> Any: ...
    def removeSplitter(self, *args, **kwargs) -> Any: ...
    def replaceShape(self, *args, **kwargs) -> Any: ...
    def reverse(self, *args, **kwargs) -> Any: ...
    def revolve(self, *args, **kwargs) -> Any: ...
    def rotate(self, *args, **kwargs) -> Any: ...
    def rotated(base, dir, degree) -> shape: ...
    def scale(self, *args, **kwargs) -> Any: ...
    def scaled(factor, base = ...) -> shape: ...
    def section(self, *args, **kwargs) -> Any: ...
    def sewShape(self, *args, **kwargs) -> Any: ...
    def slice(self, *args, **kwargs) -> Any: ...
    def slices(self, *args, **kwargs) -> Any: ...
    def tessellate(self, *args, **kwargs) -> Any: ...
    def toNurbs(self, *args, **kwargs) -> Any: ...
    def transformGeometry(Matrix) -> Shape: ...
    def transformShape(self, *args, **kwargs) -> Any: ...
    def transformed(Matrix, copy = ..., checkScale = ..., op = ...) -> shape: ...
    def translate(self, *args, **kwargs) -> Any: ...
    def translated(vector) -> shape: ...
    def writeInventor(self, *args, **kwargs) -> Any: ...
    def __delattr__(self, name) -> Any: ...
    def __getstate__(self) -> Any: ...
    def __setattr__(self, name, value) -> Any: ...
    def __setstate__(self, state) -> Any: ...

class Shell(Shape):
    CenterOfMass: Any = ...
    Mass: Any = ...
    MatrixOfInertia: Any = ...
    PrincipalProperties: Any = ...
    StaticMoments: Any = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def add(self, *args, **kwargs) -> Any: ...
    def getBadEdges(self, *args, **kwargs) -> Any: ...
    def getFreeEdges(self, *args, **kwargs) -> Any: ...
    def makeHalfSpace(self, *args, **kwargs) -> Any: ...
    def __delattr__(self, name) -> Any: ...
    def __setattr__(self, name, value) -> Any: ...

class Solid(Shape):
    CenterOfMass: Any = ...
    Mass: Any = ...
    MatrixOfInertia: Any = ...
    OuterShell: Any = ...
    PrincipalProperties: Any = ...
    StaticMoments: Any = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def getMomentOfInertia(point, direction) -> Any: ...
    def getRadiusOfGyration(point, direction) -> Any: ...
    def offsetFaces(self, *args, **kwargs) -> Any: ...
    def __delattr__(self, name) -> Any: ...
    def __setattr__(self, name, value) -> Any: ...

class Sphere(GeometrySurface):
    Area: Any = ...
    Axis: Any = ...
    Center: Any = ...
    Radius: Any = ...
    Volume: Any = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def uIso(self, *args, **kwargs) -> Any: ...
    def vIso(self, *args, **kwargs) -> Any: ...
    def __delattr__(self, name) -> Any: ...
    def __setattr__(self, name, value) -> Any: ...

class SurfaceOfExtrusion(GeometrySurface):
    BasisCurve: Any = ...
    Direction: Any = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def uIso(self, *args, **kwargs) -> Any: ...
    def vIso(self, *args, **kwargs) -> Any: ...
    def __delattr__(self, name) -> Any: ...
    def __setattr__(self, name, value) -> Any: ...

class SurfaceOfRevolution(GeometrySurface):
    BasisCurve: Any = ...
    Direction: Any = ...
    Location: Any = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __delattr__(self, name) -> Any: ...
    def __setattr__(self, name, value) -> Any: ...

class Toroid(GeometrySurface):
    Area: Any = ...
    Axis: Any = ...
    Center: Any = ...
    MajorRadius: Any = ...
    MinorRadius: Any = ...
    Volume: Any = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def uIso(self, *args, **kwargs) -> Any: ...
    def vIso(self, *args, **kwargs) -> Any: ...
    def __delattr__(self, name) -> Any: ...
    def __setattr__(self, name, value) -> Any: ...

class Vertex(Shape):
    Point: Any = ...
    Tolerance: Any = ...
    X: Any = ...
    Y: Any = ...
    Z: Any = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __delattr__(self, name) -> Any: ...
    def __setattr__(self, name, value) -> Any: ...

class Wire(Shape):
    CenterOfMass: Any = ...
    Continuity: Any = ...
    Mass: Any = ...
    MatrixOfInertia: Any = ...
    OrderedEdges: Any = ...
    OrderedVertexes: Any = ...
    PrincipalProperties: Any = ...
    StaticMoments: Any = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def add(self, *args, **kwargs) -> Any: ...
    def approximate(self, *args, **kwargs) -> Any: ...
    @overload
    def discretize(Number = ...) -> Any: ...
    @overload
    def discretize(QuasiNumber = ...) -> Any: ...
    @overload
    def discretize(Distance = ...) -> Any: ...
    @overload
    def discretize(Deflection = ...) -> Any: ...
    @overload
    def discretize(QuasiDeflection = ...) -> Any: ...
    @overload
    def discretize(Number = ...) -> Any: ...
    @overload
    def discretize(Angular = ..., Curvature = ..., Minimum = ...) -> Any: ...
    def fixWire(face, tolerance) -> Any: ...
    def makeHomogenousWires(self, *args, **kwargs) -> Any: ...
    def makeOffset(self, *args, **kwargs) -> Any: ...
    def makePipe(self, *args, **kwargs) -> Any: ...
    def makePipeShell(self, *args, **kwargs) -> Any: ...
    def __delattr__(self, name) -> Any: ...
    def __setattr__(self, name, value) -> Any: ...
