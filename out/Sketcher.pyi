from typing import Any

import Base
import Part

def insert(*args, **kwargs) -> Any: ...
def open(*args, **kwargs) -> Any: ...

class Constraint(Base.Persistence):
    Driving: Any = ...
    First: Any = ...
    FirstPos: Any = ...
    InVirtualSpace: Any = ...
    IsActive: Any = ...
    Name: Any = ...
    Second: Any = ...
    SecondPos: Any = ...
    Third: Any = ...
    ThirdPos: Any = ...
    Type: Any = ...
    Value: Any = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __delattr__(self, name) -> Any: ...
    def __setattr__(self, name, value) -> Any: ...

class ExternalGeometryExtension(Part.GeometryExtension):
    Ref: Any = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def setFlag(self, *args, **kwargs) -> Any: ...
    def testFlag(self, *args, **kwargs) -> Any: ...
    def __delattr__(self, name) -> Any: ...
    def __setattr__(self, name, value) -> Any: ...

class Sketch(Base.Persistence):
    Conflicts: Any = ...
    Constraint: Any = ...
    Geometries: Any = ...
    Redundancies: Any = ...
    Shape: Any = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def addConstraint(self, *args, **kwargs) -> Any: ...
    def addGeometry(self, *args, **kwargs) -> Any: ...
    def clear(self, *args, **kwargs) -> Any: ...
    def movePoint(self, *args, **kwargs) -> Any: ...
    def solve(self, *args, **kwargs) -> Any: ...
    def __delattr__(self, name) -> Any: ...
    def __setattr__(self, name, value) -> Any: ...

class SketchGeometryExtension(Part.GeometryExtension):
    Id: Any = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __delattr__(self, name) -> Any: ...
    def __setattr__(self, name, value) -> Any: ...
