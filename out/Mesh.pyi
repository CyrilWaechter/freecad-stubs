from typing import Any

from typing import overload
import App
import Data

def calculateEigenTransform(*args, **kwargs) -> Any: ...
def createBox(*args, **kwargs) -> Any: ...
def createCone(*args, **kwargs) -> Any: ...
def createCylinder(*args, **kwargs) -> Any: ...
def createEllipsoid(*args, **kwargs) -> Any: ...
def createPlane(*args, **kwargs) -> Any: ...
def createSphere(*args, **kwargs) -> Any: ...
def createTorus(*args, **kwargs) -> Any: ...
def export(*args, **kwargs) -> Any: ...
def insert(*args, **kwargs) -> Any: ...
def minimumVolumeOrientedBox(*args, **kwargs) -> Any: ...
def open(string) -> Any: ...
def polynomialFit(*args, **kwargs) -> Any: ...
def read(*args, **kwargs) -> Any: ...
def show(*args, **kwargs) -> Any: ...

class Facet(PyObjectBase):
    Area: Any = ...
    AspectRatio: Any = ...
    AspectRatio2: Any = ...
    Bound: Any = ...
    CircumCircle: Any = ...
    InCircle: Any = ...
    Index: Any = ...
    NeighbourIndices: Any = ...
    Normal: Any = ...
    PointIndices: Any = ...
    Points: Any = ...
    Roundness: Any = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def intersect(Facet) -> list: ...
    def isDeformed(self, *args, **kwargs) -> Any: ...
    def isDegenerated(self, *args, **kwargs) -> Any: ...
    def unbound(self, *args, **kwargs) -> Any: ...
    def __delattr__(self, name) -> Any: ...
    def __setattr__(self, name, value) -> Any: ...

class Feature(App.GeoFeature):
    def __init__(self, *args, **kwargs) -> None: ...
    def countFacets(self, *args, **kwargs) -> Any: ...
    def countPoints(self, *args, **kwargs) -> Any: ...
    def fixDegenerations(self, *args, **kwargs) -> Any: ...
    def fixIndices(self, *args, **kwargs) -> Any: ...
    def fixSelfIntersections(self, *args, **kwargs) -> Any: ...
    def harmonizeNormals(self, *args, **kwargs) -> Any: ...
    def removeDuplicatedFacets(self, *args, **kwargs) -> Any: ...
    def removeDuplicatedPoints(self, *args, **kwargs) -> Any: ...
    def removeFoldsOnSurface(self, *args, **kwargs) -> Any: ...
    def removeInvalidPoints(self, *args, **kwargs) -> Any: ...
    def removeNonManifoldPoints(self, *args, **kwargs) -> Any: ...
    def removeNonManifolds(self, *args, **kwargs) -> Any: ...
    def smooth(self, *args, **kwargs) -> Any: ...
    def __delattr__(self, name) -> Any: ...
    def __setattr__(self, name, value) -> Any: ...

class Mesh(Data.ComplexGeoData):
    Area: Any = ...
    CountEdges: Any = ...
    CountFacets: Any = ...
    CountPoints: Any = ...
    Facets: Any = ...
    Points: Any = ...
    Topology: Any = ...
    Volume: Any = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def addFacet(self, *args, **kwargs) -> Any: ...
    def addFacets(self, *args, **kwargs) -> Any: ...
    def addMesh(self, *args, **kwargs) -> Any: ...
    def clear(self, *args, **kwargs) -> Any: ...
    def coarsen(self, *args, **kwargs) -> Any: ...
    def collapseEdge(self, *args, **kwargs) -> Any: ...
    def collapseFacet(self, *args, **kwargs) -> Any: ...
    def collapseFacets(self, *args, **kwargs) -> Any: ...
    def copy(self, *args, **kwargs) -> Any: ...
    def countComponents(self, *args, **kwargs) -> Any: ...
    def countNonUniformOrientedFacets(self, *args, **kwargs) -> Any: ...
    def countSegments(self, *args, **kwargs) -> Any: ...
    def crossSections(self, *args, **kwargs) -> Any: ...
    def cut(list, int) -> None: ...
    def decimate(self, *args, **kwargs) -> Any: ...
    def difference(self, *args, **kwargs) -> Any: ...
    def fillupHoles(self, *args, **kwargs) -> Any: ...
    def fixCaps(self, *args, **kwargs) -> Any: ...
    def fixDeformations(self, *args, **kwargs) -> Any: ...
    def fixDegenerations(self, *args, **kwargs) -> Any: ...
    def fixIndices(self, *args, **kwargs) -> Any: ...
    def fixSelfIntersections(self, *args, **kwargs) -> Any: ...
    def flipNormals(self, *args, **kwargs) -> Any: ...
    def foraminate(self, *args, **kwargs) -> Any: ...
    def getCurvaturePerVertex(self, *args, **kwargs) -> Any: ...
    def getEigenSystem(self, *args, **kwargs) -> Any: ...
    def getFacetSelection(self, *args, **kwargs) -> Any: ...
    def getInternalFacets(self, *args, **kwargs) -> Any: ...
    def getNonUniformOrientedFacets(self, *args, **kwargs) -> Any: ...
    def getPlanarSegments(self, *args, **kwargs) -> Any: ...
    def getPointNormals(self, *args, **kwargs) -> Any: ...
    def getPointSelection(self, *args, **kwargs) -> Any: ...
    def getSegment(self, *args, **kwargs) -> Any: ...
    def getSegmentsByCurvature(list) -> list: ...
    def getSegmentsOfType(self, *args, **kwargs) -> Any: ...
    def getSelfIntersections(self, *args, **kwargs) -> Any: ...
    def getSeparateComponents(self, *args, **kwargs) -> Any: ...
    def harmonizeNormals(self, *args, **kwargs) -> Any: ...
    def hasInvalidPoints(self, *args, **kwargs) -> Any: ...
    def hasNonManifolds(self, *args, **kwargs) -> Any: ...
    def hasNonUniformOrientedFacets(self, *args, **kwargs) -> Any: ...
    def hasSelfIntersections(self, *args, **kwargs) -> Any: ...
    def inner(self, *args, **kwargs) -> Any: ...
    def insertVertex(self, *args, **kwargs) -> Any: ...
    def intersect(self, *args, **kwargs) -> Any: ...
    def isSolid(self, *args, **kwargs) -> Any: ...
    def mergeFacets(self, *args, **kwargs) -> Any: ...
    def meshFromSegment(self, *args, **kwargs) -> Any: ...
    def nearestFacetOnRay(self, *args, **kwargs) -> Any: ...
    def offset(self, *args, **kwargs) -> Any: ...
    def offsetSpecial(self, *args, **kwargs) -> Any: ...
    def optimizeEdges(self, *args, **kwargs) -> Any: ...
    def optimizeTopology(self, *args, **kwargs) -> Any: ...
    def outer(self, *args, **kwargs) -> Any: ...
    def printInfo(self, *args, **kwargs) -> Any: ...
    @overload
    def read(Filename = ...) -> Any: ...
    @overload
    def read(Stream = ..., Format = ...) -> Any: ...
    def rebuildNeighbourHood(self, *args, **kwargs) -> Any: ...
    def refine(self, *args, **kwargs) -> Any: ...
    def removeComponents(self, *args, **kwargs) -> Any: ...
    def removeDuplicatedFacets(self, *args, **kwargs) -> Any: ...
    def removeDuplicatedPoints(self, *args, **kwargs) -> Any: ...
    def removeFacets(self, *args, **kwargs) -> Any: ...
    def removeFoldsOnSurface(self, *args, **kwargs) -> Any: ...
    def removeFullBoundaryFacets(self, *args, **kwargs) -> Any: ...
    def removeInvalidPoints(self, *args, **kwargs) -> Any: ...
    def removeNeedles(self, *args, **kwargs) -> Any: ...
    def removeNonManifoldPoints(self, *args, **kwargs) -> Any: ...
    def removeNonManifolds(self, *args, **kwargs) -> Any: ...
    def rotate(self, *args, **kwargs) -> Any: ...
    def setPoint(int, Vector) -> Any: ...
    def smooth(self, *args, **kwargs) -> Any: ...
    def snapVertex(self, *args, **kwargs) -> Any: ...
    def splitEdge(self, *args, **kwargs) -> Any: ...
    def splitEdges(self, *args, **kwargs) -> Any: ...
    def splitFacet(self, *args, **kwargs) -> Any: ...
    def swapEdge(self, *args, **kwargs) -> Any: ...
    def transform(self, *args, **kwargs) -> Any: ...
    def transformToEigen(self, *args, **kwargs) -> Any: ...
    def translate(self, *args, **kwargs) -> Any: ...
    def trim(list, int) -> None: ...
    def unite(self, *args, **kwargs) -> Any: ...
    def write(self, *args, **kwargs) -> Any: ...
    def writeInventor(self, *args, **kwargs) -> Any: ...
    def __delattr__(self, name) -> Any: ...
    def __setattr__(self, name, value) -> Any: ...

class MeshPoint(PyObjectBase):
    Bound: Any = ...
    Index: Any = ...
    Normal: Any = ...
    Vector: Any = ...
    x: Any = ...
    y: Any = ...
    z: Any = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def move(Vector) -> Any: ...
    def unbound(self, *args, **kwargs) -> Any: ...
    def __delattr__(self, name) -> Any: ...
    def __setattr__(self, name, value) -> Any: ...
